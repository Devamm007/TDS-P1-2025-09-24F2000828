# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "fastapi[standard]",
#     "uvicorn",
#     "python-dotenv",
#     "requests",
# ]
# ///

from fastapi import FastAPI
import requests

from dotenv import load_dotenv
from os import getenv
import base64

app = FastAPI()

load_dotenv()
app.state.SECRET = getenv("SECRET")
app.state.LLM_API_KEY = getenv("LLM_API_KEY")
app.state.GITHUB_TOKEN = getenv("GITHUB_TOKEN")

def validate_secret(secret: str) -> bool:
    return secret == app.state.SECRET

def create_repo(reponame: str):
    '''Create a new GitHub repository with the given name'''

    payload = {
        "name": reponame,
        "private": False,
        "auto_init": True,
        "license_template": "mit",
        # "gitignore_template": "Python"
    }

    headers = {
        "Authorization": f"Bearer {app.state.GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    response = requests.post(
        "https://api.github.com/user/repos", 
        json=payload,
        headers=headers
    )

    if response.status_code != 201:
        raise Exception(f"Failed to create repository: {response.status_code}, {response.text}")
    else:
        print(f"Repository {reponame} created successfully. [{response.json().get('html_url')}]")
        return response.json()

def enable_pages(reponame: str):
    ''''Enable GitHub Pages for the given repository using API'''

    payload = {
        "build_type": "legacy",
        "source": {
            "branch": "main",
            "path": "/"
        }
    }

    headers = {
        "Authorization": f"Bearer {app.state.GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    response = requests.post(
        f"https://api.github.com/repos/Devamm007/{reponame}/pages",
        headers=headers,
        json = payload
    )

    if response.status_code != 201:
        raise Exception(f"Failed to enable GitHub Pages: {response.status_code}, {response.text}")
    else:
        print(f"GitHub Pages enabled for repository {reponame}.")
        return response.json()
    
def get_sha_latest_commit(reponame: str, branch: str = "main") -> str:
    '''Get the SHA of the latest commit on the given branch of the repository'''

    headers = {
        "Authorization": f"Bearer {app.state.GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    response = requests.get(
        f"https://api.github.com/repos/Devamm007/{reponame}/commits/{branch}",
        headers=headers,
    )

    if response.status_code != 200:
        raise Exception(f"Failed to get latest commit: {response.status_code}, {response.text}")
    else:
        return response.json().get('sha')
    
def llm_process():
    # currently hardcoded to return a sample file list
    # in real implementation, this would interact with an LLM to generate code files
    # based on the task brief and requirements

    return [
        {
            "name": "index.html",
            "content": "<html><body><h1>Captcha Solver</h1></body></html>"
        }
    ]

def push_code(reponame: str, files: list[dict], round: int):
    '''Push code files generated by LLM to the given repository'''
    if round == 2:
        latestsha = get_sha_latest_commit(reponame)
    else:
        latestsha = None

    headers = {
        "Authorization": f"Bearer {app.state.GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    for file in files:
        filename = file.get('name')
        content = file.get('content')

        if isinstance(content, bytes):
            content = base64.b64encode(content).decode('utf-8')
        else:
            content = base64.b64encode(content.encode('utf-8')).decode('utf-8')

        payload = {
                "message": f"Add {filename}",
                "content": content.encode('utf-8').decode('utf-8')
            }
        
        if latestsha:
            payload["sha"] = latestsha

        response = requests.put(
            f"https://api.github.com/repos/Devamm007/{reponame}/contents/{filename}",
            headers=headers,
            json=payload,
        )

        if response.status_code not in [200, 201]:
            raise Exception(f"Failed to push file {filename}: {response.status_code}, {response.text}")
        else:
            print(f"File {filename} pushed successfully to repository {reponame}.")

def round1_handler(data: dict) -> dict:
    '''Handle round 1 tasks: create repo, enable pages, generate code with llm, and push code'''

    #LLM OPERATIONS
    files = llm_process()

    #GITHUB OPERATIONS
    reponame = f"{data['task']}-{data['nonce']}"
    create_repo(reponame)
    enable_pages(reponame)
    push_code(reponame, files, 1)

    return {"status": "Round 1 task processed"}

def round2_handler(data: dict) -> dict:
    return {"status": "Round 2 task processed"}

'''
post endpoint that takes json body with fields: email, secret, task, round, nonce, brief,
checks[array], evaluation_url, attachments[array with object with fields name and url]
'''
@app.post("/handle_task")
def handle_task(data: dict):
    # validate secret
    if not validate_secret(data.get('secret', '')):
        return {"error": "Invalid secret"}
    else:
        # process the task
        if data.get('round') == 1:
            round1_handler(data)
            return {"status": "Round 1 task processed"}
        elif data.get('round') == 2:
            round2_handler(data)
            return {"status": "Round 2 task processed"}
        else:
            return {"error": "Invalid round"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)